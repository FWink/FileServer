@model FileServer.BrowseDirectoriesPageModel
@{
    string fileTypeSize;
}
<style type="text/css">
    table tr th {
        text-align: start;
    }

    .file-size {
        text-align: end;
    }

    label {
        display: block;
    }

    td:not(:first-child), th:not(:first-child) {
        padding-left: 12px;
    }

    td,th {
        padding-bottom: 4px;
    }

    .btn-select-bulk {
        min-width: 60px;
    }

    .btn-submit {
        min-width: 120px;
    }

</style>
<form method="get" id="formFiles">
    <h1>
        @Model.HostName - @Model.DirectoryPath
    </h1>
    @if (Model.CanGoBack)
    {
    <p>
        <a href="@Model.ParentDirectory" onclick="return onTryBack(event);">Back</a>
    </p>
    }
    <table>
        <tr>
            <th>
                Select
            </th>
            <th class="file-size">
                Size
            </th>
            <th>
                File
            </th>
        </tr>
        @foreach (var file in Model.Directory)
        {
            <tr>
                <td>
                    <input type="checkbox" name="zip" value="@file.Name" id="@file.Name" class="file-zip-selection" />
                </td>
                <td class="file-size">
                    @if(file.IsDirectory)
                    {
                        fileTypeSize = "<dir>";
                    }
                    else
                    {
                        fileTypeSize = file.Length.ToString();
                    }
                    <label for="@file.Name">
                        @fileTypeSize
                    </label>
                </td>
                <td>
                    <a href="@Model.GetPath(file)">@file.Name</a>
                </td>
            </tr>
        }
        <tr>
            <td colspan="2">
                <button type="button" id="btnSelectAll" class="btn-select-bulk">All</button>
                <button type="button" id="btnSelectNone" class="btn-select-bulk">None</button>
            </td>
            <td>
                <input type="submit" value="Download" class="btn-submit" />
            </td>
        </tr>
    </table>
</form>
<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {

        function getSelectedFiles() {
            return document.querySelectorAll(".file-zip-selection:checked");
        }

        function filesSelected() {
            return getSelectedFiles().length > 0;
        }

        document.getElementById("formFiles").addEventListener("submit", function (e) {

            if (!filesSelected()) {
                e.preventDefault();
                e.stopPropagation();

                window.location += "?zip";

                return;
            }
        });

        function checkAll(checked) {
            
            var checkboxes = document.querySelectorAll(".file-zip-selection");
            for (var i = 0; i < checkboxes.length; ++i) {
                checkboxes[i].checked = checked;
            }
        }

        document.getElementById("btnSelectAll").addEventListener("click", function () {

            checkAll(true);
        });

        document.getElementById("btnSelectNone").addEventListener("click", function () {

            checkAll(false);
        });
    });

    window.onpageshow = function () {

        if (window.performance.navigation.type == PerformanceNavigation.TYPE_BACK_FORWARD) {
            //check if we went forward or backward
            var previous = this.navStackAt(-1);
            if (previous) {
                if (navStackLocationEquals(previous.location, window.location.href)) {
                    //probably went one step back
                    navStackPop();
                }
                else {
                    //probably went forward
                    navStackPush();
                }
            }
            else {
                //couldn't have gone back (probably)
                navStackPush();
            }
        }
        else {
            //normal navigation
            navStackPush();
        }

        console.log(this.navStackGet());
    }

    function onTryBack(ev) {
        var previous = navStackAt(-1);
        if (previous && navStackLocationEquals(previous.location, ev.target.href)) {
            //do a browser popback
            window.history.back();
            return false;
        }
        return true;
    }

    /**
     * Pushes the browser's current location onto a navigation stack we build in the browser's
     * session stack.
     * Does nothing however, if the stack's top entry equals the current location.
     */
    function navStackPush() {

        if (!navStackTopMatches()) {

            var stack = navStackGet();

            stack.push({
                location: window.location.href
            });
            window.sessionStorage.setItem("navStack", JSON.stringify(stack));
        }
    }

    /**
     * Pops our navigation stack's topmost entry. Executed when the user navigates back
     * (via the browser back button).
     */
    function navStackPop() {
        var stack = navStackGet();
        if (stack.length > 0) {
            stack.pop();
            window.sessionStorage.setItem("navStack", JSON.stringify(stack));
        }
    }

    /**
     * Returns the current navigation stack from the session storage.
     */
    function navStackGet() {
        var stack = window.sessionStorage.getItem("navStack");
        if (stack)
            return JSON.parse(stack);
        return [];
    }

    /**
     * Returns true if the given locations (as taken from window.location.href) match.
     */
    function navStackLocationEquals(loc1, loc2) {
        return loc1 == loc2 || (loc1 + "/") == loc2 || loc1 == (loc2 + "/");
    }

    /**
     * Returns true if the current location matches the top of our nav stack.
     */
    function navStackTopMatches() {
        var top = navStackAt(0);

        return top && navStackLocationEquals(top.location, window.location.href);
    }

    function navStackAt(indexPrev) {
        var stack = navStackGet();

        if (stack.length > -indexPrev) {
            return stack[stack.length + indexPrev - 1];
        }

        return null;
    }

</script>